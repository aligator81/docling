"""Update page_numbers to ARRAY type

Revision ID: 09f3b85b358c
Revises: 
Create Date: 2025-10-09 16:38:57.502434

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '09f3b85b358c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('processing_logs')
    op.drop_table('app_config')
    op.drop_table('search_history')
    op.drop_constraint(op.f('api_sessions_user_id_fkey'), 'api_sessions', type_='foreignkey')
    op.create_foreign_key(None, 'api_sessions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(op.f('chat_history_user_id_fkey'), 'chat_history', type_='foreignkey')
    op.create_foreign_key(None, 'chat_history', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('document_chunks', 'document_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('document_chunks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('document_chunks', 'section_title',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.create_index('idx_chunks_document_id', 'document_chunks', ['document_id'], unique=False)
    op.create_index('idx_chunks_text', 'document_chunks', ['chunk_text'], unique=False)
    op.create_index(op.f('ix_document_chunks_id'), 'document_chunks', ['id'], unique=False)
    op.drop_constraint(op.f('document_chunks_document_id_fkey'), 'document_chunks', type_='foreignkey')
    op.create_foreign_key(None, 'document_chunks', 'documents', ['document_id'], ['id'], ondelete='CASCADE')
    op.alter_column('documents', 'original_filename',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('documents', 'file_path',
               existing_type=sa.VARCHAR(length=500),
               nullable=False)
    op.alter_column('documents', 'file_size',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('documents', 'mime_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('documents', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('documents', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'processing'::character varying"))
    op.alter_column('documents', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('documents', 'file_type',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.create_index(op.f('ix_documents_id'), 'documents', ['id'], unique=False)
    op.create_foreign_key(None, 'documents', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('documents', 'metadata')
    op.alter_column('embeddings', 'chunk_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('embeddings', 'page_numbers',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.ARRAY(sa.Integer()),
               existing_nullable=True,
               postgresql_using='page_numbers::text::integer[]')
    op.alter_column('embeddings', 'title',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('embeddings', 'embedding_provider',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.alter_column('embeddings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index('idx_embeddings_chunk_id', 'embeddings', ['chunk_id'], unique=False)
    op.create_index('idx_embeddings_model', 'embeddings', ['embedding_model'], unique=False)
    op.create_index('idx_embeddings_provider', 'embeddings', ['embedding_provider'], unique=False)
    op.create_index(op.f('ix_embeddings_id'), 'embeddings', ['id'], unique=False)
    op.drop_constraint(op.f('embeddings_chunk_id_fkey'), 'embeddings', type_='foreignkey')
    op.create_foreign_key(None, 'embeddings', 'document_chunks', ['chunk_id'], ['id'], ondelete='CASCADE')
    op.drop_column('embeddings', 'text')
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_username'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'])
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'])
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'role',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'user'::character varying"))
    op.add_column('embeddings', sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'embeddings', type_='foreignkey')
    op.create_foreign_key(op.f('embeddings_chunk_id_fkey'), 'embeddings', 'document_chunks', ['chunk_id'], ['id'])
    op.drop_index(op.f('ix_embeddings_id'), table_name='embeddings')
    op.drop_index('idx_embeddings_provider', table_name='embeddings')
    op.drop_index('idx_embeddings_model', table_name='embeddings')
    op.drop_index('idx_embeddings_chunk_id', table_name='embeddings')
    op.alter_column('embeddings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('embeddings', 'embedding_provider',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.alter_column('embeddings', 'title',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('embeddings', 'page_numbers',
               existing_type=postgresql.ARRAY(sa.Integer()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               postgresql_using='page_numbers::text::jsonb')
    op.alter_column('embeddings', 'chunk_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('documents', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'documents', type_='foreignkey')
    op.drop_index(op.f('ix_documents_id'), table_name='documents')
    op.alter_column('documents', 'file_type',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('documents', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('documents', 'status',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'processing'::character varying"))
    op.alter_column('documents', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('documents', 'mime_type',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('documents', 'file_size',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('documents', 'file_path',
               existing_type=sa.VARCHAR(length=500),
               nullable=True)
    op.alter_column('documents', 'original_filename',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_constraint(None, 'document_chunks', type_='foreignkey')
    op.create_foreign_key(op.f('document_chunks_document_id_fkey'), 'document_chunks', 'documents', ['document_id'], ['id'])
    op.drop_index(op.f('ix_document_chunks_id'), table_name='document_chunks')
    op.drop_index('idx_chunks_text', table_name='document_chunks')
    op.drop_index('idx_chunks_document_id', table_name='document_chunks')
    op.alter_column('document_chunks', 'section_title',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('document_chunks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('document_chunks', 'document_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'chat_history', type_='foreignkey')
    op.create_foreign_key(op.f('chat_history_user_id_fkey'), 'chat_history', 'users', ['user_id'], ['id'])
    op.drop_constraint(None, 'api_sessions', type_='foreignkey')
    op.create_foreign_key(op.f('api_sessions_user_id_fkey'), 'api_sessions', 'users', ['user_id'], ['id'])
    op.create_table('search_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('query_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('search_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('search_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('user_session', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('result_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('search_history_pkey'))
    )
    op.create_table('app_config',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('config_key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('config_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('app_config_pkey')),
    sa.UniqueConstraint('config_key', name=op.f('app_config_config_key_key'))
    )
    op.create_table('processing_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processing_stage', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name=op.f('processing_logs_document_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('processing_logs_pkey'))
    )
    # ### end Alembic commands ###
